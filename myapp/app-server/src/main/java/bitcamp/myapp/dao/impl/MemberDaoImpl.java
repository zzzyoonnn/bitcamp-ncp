package bitcamp.myapp.dao.impl;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import bitcamp.myapp.dao.DaoException;
import bitcamp.myapp.dao.MemberDao;
import bitcamp.myapp.vo.Member;
import bitcamp.util.ConnectionFactory;

public class MemberDaoImpl implements MemberDao {

  ConnectionFactory conFactory;

  public MemberDaoImpl(ConnectionFactory conFactory) {
    this.conFactory = conFactory;
  }

  @Override
  public void insert(Member m) {
    try (PreparedStatement stmt = conFactory.getConnection().prepareStatement(
        "insert into app_member(name, email, pwd, tel)"
            + " values(?, ?, sha2(?,256), ?)", Statement.RETURN_GENERATED_KEYS)) {

      stmt.setString(1, m.getName());
      stmt.setString(2, m.getEmail());
      stmt.setString(3, m.getPassword());
      stmt.setString(4, m.getTel());

      stmt.executeUpdate();

      try (ResultSet keyRs = stmt.getGeneratedKeys()) {
        keyRs.next();
        int autoGeneratedMemberId = keyRs.getInt(1);
        m.setNo(autoGeneratedMemberId);
      }

    } catch (Exception e) {
      throw new DaoException(e);
    }
  }

  @Override
  public List<Member> findAll() {
    try (PreparedStatement stmt = conFactory.getConnection().prepareStatement(
        "select member_id, name, email, created_date"
            + " from app_member"
            + " order by member_id desc");
        ResultSet rs = stmt.executeQuery()) {

      ArrayList<Member> list = new ArrayList<>();
      while (rs.next()) {
        Member m = new Member();
        m.setNo(rs.getInt("member_id"));
        m.setName(rs.getString("name"));
        m.setEmail(rs.getString("email"));
        m.setCreatedDate(rs.getDate("created_date"));

        list.add(m);
      }
      return list;

    } catch (Exception e) {
      throw new DaoException(e);
    }
  }

  @Override
  public Member findByNo(int no) {
    try (PreparedStatement stmt = conFactory.getConnection().prepareStatement(
        "select member_id, name, email, tel, created_date"
            + " from app_member"
            + " where member_id=?")) {

      stmt.setInt(1, no);

      try (ResultSet rs = stmt.executeQuery()) {
        if (rs.next()) {
          Member m = new Member();
          m.setNo(rs.getInt("member_id"));
          m.setName(rs.getString("name"));
          m.setEmail(rs.getString("email"));
          m.setTel(rs.getString("tel"));
          m.setCreatedDate(rs.getDate("created_date"));
          return m;
        }
        return null;
      }

    } catch (Exception e) {
      throw new DaoException(e);
    }
  }

  @Override
  public int update(Member m) {
    try (PreparedStatement stmt = conFactory.getConnection().prepareStatement(
        "update app_member set "
            + " name=?, email=?, pwd=sha2(?,256), tel=?"
            + " where member_id=?")) {

      stmt.setString(1, m.getName());
      stmt.setString(2, m.getEmail());
      stmt.setString(3, m.getPassword());
      stmt.setString(4, m.getTel());
      stmt.setInt(5, m.getNo());

      return stmt.executeUpdate();

    } catch (Exception e) {
      throw new DaoException(e);
    }
  }

  @Override
  public int delete(int no) {
    try (PreparedStatement stmt = conFactory.getConnection().prepareStatement(
        "delete from app_member"
            + " where member_id=?")) {

      stmt.setInt(1, no);
      return stmt.executeUpdate();

    } catch (Exception e) {
      throw new DaoException(e);
    }
  }
}























